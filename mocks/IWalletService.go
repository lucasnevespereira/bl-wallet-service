// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	models "bl-wallet-service/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// IWalletService is an autogenerated mock type for the IWalletService type
type IWalletService struct {
	mock.Mock
}

// Create provides a mock function with given fields: userID
func (_m *IWalletService) Create(userID string) error {
	ret := _m.Called(userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByUserID provides a mock function with given fields: userID
func (_m *IWalletService) GetByUserID(userID string) (*models.Wallet, error) {
	ret := _m.Called(userID)

	var r0 *models.Wallet
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.Wallet, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) *models.Wallet); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Wallet)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessTransaction provides a mock function with given fields: userID, transactionType, amount
func (_m *IWalletService) ProcessTransaction(userID string, transactionType string, amount float64) error {
	ret := _m.Called(userID, transactionType, amount)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, float64) error); ok {
		r0 = rf(userID, transactionType, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIWalletService creates a new instance of IWalletService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIWalletService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IWalletService {
	mock := &IWalletService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
